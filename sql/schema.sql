-- MySQL Script generated by MySQL Workbench
-- Mon May 23 23:07:31 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `Executive`
-- -----------------------------------------------------

DROP TABLE IF EXISTS `Executive`;
CREATE TABLE IF NOT EXISTS `Executive` (
  `ID` VARCHAR(45) NOT NULL,
  `First_Name` VARCHAR(45) NOT NULL,
  `Last_Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Program`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Program`;
CREATE TABLE IF NOT EXISTS `Program` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `ELIDEK_Sector` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Foundation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Foundation`;
CREATE TABLE IF NOT EXISTS `Foundation` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Abbreviation` VARCHAR(45) NOT NULL,
  `Postal_Code` INT NOT NULL,
  `Street` VARCHAR(45) NOT NULL,
  `Street_Number` VARCHAR(10) NOT NULL,
  `City` VARCHAR(45) NOT NULL,
  `Foundation_Phone_1`VARCHAR(45) NOT NULL,
  `Foundation_Phone_2` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`)
  )
ENGINE = InnoDB
ROW_FORMAT = DEFAULT;


-- -----------------------------------------------------
-- Table `Foundation_Phone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Foundation_Extra_Phones`;
CREATE TABLE IF NOT EXISTS `Foundation_Extra_Phones` (
  `Phone_Number` VARCHAR(45) NOT NULL,
  `Foundation_ID` INT NOT NULL,
  PRIMARY KEY (`Phone_Number`),
  INDEX `fk_Foundation_Extra_Phones_Foundation1_idx` (`Foundation_ID` ASC),
  CONSTRAINT `fk_Foundation_Extra_Phones_Foundation1`
    FOREIGN KEY (`Foundation_ID`)
    REFERENCES `Foundation` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Researcher`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Researcher`;
CREATE TABLE IF NOT EXISTS `Researcher` (
  `ID` VARCHAR(45) NOT NULL,
  `First_Name` VARCHAR(45) NOT NULL,
  `Last_Name` VARCHAR(45) NOT NULL,
  `Sex` VARCHAR(15) NOT NULL,
  `Birth_Date` DATE NOT NULL,
  `Foundation_ID` INT NOT NULL,
  `Foundation_Date` DATE NOT NULL,
  `Age` int AS (round(datediff(curdate(), birth_date)/365, 0)),
  PRIMARY KEY (`ID`),
  INDEX `fk_Researcher_Foundation1_idx` (`Foundation_ID` ASC),
  CONSTRAINT `fk_Researcher_Foundation1`
    FOREIGN KEY (`Foundation_ID`)
    REFERENCES `Foundation` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Researcher_works_on_Project`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Researcher_works_on_Project`;
CREATE TABLE IF NOT EXISTS `Researcher_works_on_Project` (
  `Researcher_ID` VARCHAR(45) NOT NULL,
  `Project_ID` INT NOT NULL,
  PRIMARY KEY (`Researcher_ID`, `Project_ID`),
  INDEX `fk_Researcher_has_Project_Project1_idx` (`Project_ID` ASC),
  INDEX `fk_Researcher_has_Project_Researcher1_idx` (`Researcher_ID` ASC),
  CONSTRAINT `fk_Researcher_works_on_Project_Researcher1`
    FOREIGN KEY (`Researcher_ID`)
    REFERENCES `Researcher` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Researcher_works_on_Project_Project1`
    FOREIGN KEY (`Project_ID`)
    REFERENCES `Project` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Scientific_Field`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Scientific_Field`;
CREATE TABLE IF NOT EXISTS `Scientific_Field` (
  `Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Project_Scientific_Field`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Project_Scientific_Field`;
CREATE TABLE IF NOT EXISTS `mydb`.`Project_Scientific_Field` (
  `Project_ID` INT NOT NULL,
  `Scientific_Field_Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Project_ID`, `Scientific_Field_Name`),
  INDEX `fk_Project_has_Scientific_Field_Project1_idx` (`Project_ID` ASC),
  INDEX `fk_Project_Scientific_Field_Scientific_Field1_idx` (`Scientific_Field_Name` ASC),
  CONSTRAINT `fk_Project_has_Scientific_Field_Project1`
    FOREIGN KEY (`Project_ID`)
    REFERENCES `mydb`.`Project` (`ID`)
    ON DELETE cascade
    ON UPDATE cascade,
  CONSTRAINT `fk_Project_Scientific_Field_Scientific_Field1`
    FOREIGN KEY (`Scientific_Field_Name`)
    REFERENCES `mydb`.`Scientific_Field` (`Name`)
    ON DELETE NO ACTION
    ON UPDATE cascade)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Project`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Project`;
CREATE TABLE IF NOT EXISTS `mydb`.`Project` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(79) NOT NULL,
  `Start_Date` DATE NOT NULL,
  `End_Date` DATE NOT NULL,
  `Summary` TEXT NULL,
  `Funding` FLOAT NOT NULL,
  `Executive_ID` VARCHAR(45) NOT NULL,
  `Program_ID` INT NOT NULL,
  `Foundation_ID` INT NOT NULL,
  `Researcher_ID_Boss` VARCHAR(45) NOT NULL,
  `Researcher_ID_default` VARCHAR(45) NOT NULL,
  `Researcher_ID_eval` VARCHAR(45) NOT NULL,
  `Evaluation_date` Date NOT NULL,
  `Evaluation_Grade` FLOAT NOT NULL,
  `Scientific_Field_Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Project_Executive1_idx` (`Executive_ID` ASC),
  INDEX `fk_Project_Program1_idx` (`Program_ID` ASC),
  INDEX `fk_Project_Foundation1_idx` (`Foundation_ID` ASC),
  INDEX `fk_Project_Researcher2_idx` (`Researcher_ID_Boss` ASC),
  INDEX `fk_Project_Researcher1_idx` (`Researcher_ID_default` ASC),
  INDEX `fk_Project_Researcher3_idx` (`Researcher_ID_eval` ASC),
  INDEX `fk_Project_Scientific_Field1_idx` (`Scientific_Field_Name` ASC),
  CONSTRAINT `fk_Project_Executive1`
    FOREIGN KEY (`Executive_ID`)
    REFERENCES `mydb`.`Executive` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Project_Program1`
    FOREIGN KEY (`Program_ID`)
    REFERENCES `mydb`.`Program` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Project_Foundation1`
    FOREIGN KEY (`Foundation_ID`)
    REFERENCES `mydb`.`Foundation` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Project_Researcher2`
    FOREIGN KEY (`Researcher_ID_Boss`)
    REFERENCES `mydb`.`Researcher` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Project_Researcher1`
    FOREIGN KEY (`Researcher_ID_default`)
    REFERENCES `mydb`.`Researcher` (`ID`)
    
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Project_Researcher3`
    FOREIGN KEY (`Researcher_ID_eval`)
    REFERENCES `mydb`.`Researcher` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Project_Scientific_Field1`
    FOREIGN KEY (`Scientific_Field_Name`)
    REFERENCES `mydb`.`Scientific_Field` (`Name`)
    ON DELETE NO ACTION
    ON UPDATE cascade)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `Deliverable`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Deliverable`;
CREATE TABLE IF NOT EXISTS `Deliverable` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(45) NOT NULL,
  `Summary` TEXT NULL,
  `Submission_Date` DATE NOT NULL,
  `Project_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Deliverable_Project1_idx` (`Project_ID` ASC),
  CONSTRAINT `fk_Deliverable_Project1`
    FOREIGN KEY (`Project_ID`)
    REFERENCES `Project` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Company`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Company`;
CREATE TABLE IF NOT EXISTS `Company` (
  `Equaty_Capitals` VARCHAR(45) NOT NULL,
  `Foundation_ID` INT NOT NULL,
  PRIMARY KEY (`Foundation_ID`),
  CONSTRAINT `fk_Company_Foundation1`
    FOREIGN KEY (`Foundation_ID`)
    REFERENCES `Foundation` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `University`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `University`;
CREATE TABLE IF NOT EXISTS `University` (
  `Min_Edu_Budget` VARCHAR(45) NOT NULL,
  `Foundation_ID` INT NOT NULL,
  PRIMARY KEY (`Foundation_ID`),
  CONSTRAINT `fk_University_Foundation1`
    FOREIGN KEY (`Foundation_ID`)
    REFERENCES `Foundation` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Research_Center`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Research_Center`;
CREATE TABLE IF NOT EXISTS `Research_Center` (
  `Min_Edu_Budget` VARCHAR(45) NOT NULL,
  `Private_Budget` VARCHAR(45) NOT NULL,
  `Foundation_ID` INT NOT NULL,
  PRIMARY KEY (`Foundation_ID`),
  CONSTRAINT `fk_Research_Center_Foundation1`
    FOREIGN KEY (`Foundation_ID`)
    REFERENCES `Foundation` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Views
-- -----------------------------------------------------

-- Query 3.2a
create view view32a as (select res_id, first_name, last_name, Project_ID, title from
(select * from researcher_works_on_project) a inner join
(select r.id as res_id, r.first_name, r.last_name from researcher r) b
on a.researcher_id = b.res_id
inner join
(select p.title, p.id from project p) d
on d.id = project_id
order by res_id);

-- Query 3.3
create view view33 as (select ps.scientific_field_name, ps.project_id, p.title, rw.researcher_id,
r.first_name, r.last_name, p.end_date from (project_scientific_field ps inner join 
project p on p.id = ps.project_id inner join researcher_works_on_project rw on
rw.project_id = ps.project_id inner join researcher r on r.id = rw.researcher_id)
where p.end_date > curdate());
-- where ps.scientific_field_name = '{Name1}' 


-- Query 3.4
create view view34 as (select * from 
(select * from 
(select count(*) as number1, year(p.start_date) as year1, f.id as f_id1, f.name as name1 from project p 
inner join 
foundation f on p.foundation_id = f.id group by year1, f_id1) g where g.number1 > 9) k 
inner join 
(select * from 
(select count(*) as number2, year(p.start_date) as year2, f.id as f_id2, f.name as name2 from project p 
inner join 
foundation f on p.foundation_id = f.id group by year2, f_id2) l where l.number2 > 9) b 
on k.f_id1 = b.f_id2 and k.year1 = b.year2 + 1 and k.number1 = b.number2);


-- Query 3.5
create view view35 as (select ps1.Scientific_Field_Name as sf1, ps2.Scientific_Field_Name as sf2, count(*) as count 
from project_scientific_field ps1 inner join project_scientific_field ps2 
on ps1.Project_ID = ps2.Project_ID and ps1.Scientific_Field_Name > ps2.Scientific_Field_Name
group by ps1.Scientific_Field_Name, ps2.Scientific_Field_Name 
order by count DESC
limit 3);


-- Query 3.7
create view view37 as (select executive_ID, first_name, last_name, name as Company_Name, ta.id as company_id, 
sum(funding) as total_funding from 
(select p.funding, p.executive_id, p.foundation_id from project p) te inner join 
(select f.name, f.id from foundation f where f.id in (select c.foundation_id from company c)) ta 
on te.foundation_id = ta.id 
inner join executive e  
on e.id = te.executive_id 
group by executive_id, company_id 
order by total_funding desc 
limit 5);

-- Query 3.6
create view view36 as (select id, first_name, last_name, count(*) as projects from (select * from 
 (select r.id, r.first_name, r.last_name, r.birth_date 
from researcher r where datediff(curdate(), birth_date) < 14600) te 
inner join researcher_works_on_project rp on te.id = rp.researcher_id) ta 
inner join (select p.id as project_id, p.end_date from project p where p.end_date > curdate()) tb 
on tb.project_id = ta.project_id 
group by id 
order by projects DESC, last_name 
limit 5);


-- Query 3.8
create view view38 as (select * from (select project_id, researcher_id, first_name, last_name, count(*) as total_projects 
from (select * from (select p.id from project p 
where p.id not in (select d.project_id from deliverable d)) te 
inner join researcher_works_on_project rp on rp.project_id = te.id) ta 
inner join (select first_name, last_name, id as res_id from researcher) r 
on r.res_id = ta.researcher_id 
group by ta.researcher_id) tt 
where total_projects > 4 
order by total_projects DESC, last_name);

create view foundations_with_phones as select id, name, abbreviation, postal_code, street, street_number, city, 
GROUP_CONCAT(phone_number separator ', ') as phones 
from foundation f inner join foundation_extra_phones p on f.id=p.foundation_id group by id;

create view company_v as select id, name, abbreviation, postal_code, street, street_number, 
city, phones, FORMAT(equaty_capitals, 'C') as equaty_capitals from foundations_with_phones 
inner join company on id = foundation_id;

create view university_v as select id, name, abbreviation, postal_code, street, street_number, 
city, phones, FORMAT(min_edu_budget, 'C') as min_edu_budget from foundations_with_phones 
inner join university on id = foundation_id;

create view research_center_v as select id, name, abbreviation, postal_code, street, street_number, 
city, phones, FORMAT(min_edu_budget, 'C') as min_edu_budget, FORMAT(private_budget, 'C') as private_budget 
from foundations_with_phones inner join research_center on id = foundation_id;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
